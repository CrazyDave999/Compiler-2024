WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
line_comment = _{ "//" ~ (!"\n" ~ ANY)* ~ ( "\n" )? }
block_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
COMMENT = _{ line_comment | block_comment }
file = { SOI ~ ( ( var_decl ~ ";" ) | func_def | class_def )* ~ EOI }

block = { normal_block | small_block }
small_block = { ";" | stmt? }
normal_block = { "{" ~ ( normal_block | stmt | ";" )* ~ "}" }
stmt = { simple_stmt | flow_stmt | compound_stmt }
simple_stmt = { ( var_decl | expr ) ~ ";" }

expr = { base_expr ~ expr_tail? }
expr_tail = { "?" ~ expr ~ ":" ~ expr }
base_expr = { ( test ~ ( "=" ~ expr )? ) | new_expr | arr_const }

arr_const = { "{" ~ CONST? ~ ( "," ~ CONST )* ~ "}" }
new_expr = { "new" ~ ( array_init | class_init ) }

class_init = { ( user_type | builtin_type ) ~ ( "(" ~ ")" )? }
array_init = { ( user_type | builtin_type ) ~ ( ( ( "[" ~ expr ~ "]" )+ ~ blank_bracket* ) | ( blank_bracket* ~ arr_const ) ) }
blank_bracket = { "[" ~ "]" }

test = { or_test }
or_test = { and_test ~ ( "||" ~ and_test )* }
and_test = { bit_or_test ~ ( "&&" ~ bit_or_test )* }
bit_or_test = { bit_xor_test ~ ( "|" ~ bit_xor_test )* }
bit_xor_test = { bit_and_test ~ ( "^" ~ bit_and_test )* }
bit_and_test = { equal_test ~ ( "&" ~ equal_test )* }

equal_test = { comp_test ~ ( equal_op ~ comp_test )*}
equal_op = { "==" | "!=" }

comp_test = { shift_expr ~ ( comp_op ~ shift_expr )* }
comp_op = { "<=" | ">=" | "<" | ">" }

shift_expr = { add_sub_expr ~ ( shift_op ~ add_sub_expr )* }
shift_op = { "<<" | ">>" }

add_sub_expr = { mul_div_mod_expr ~ ( add_sub_op ~ mul_div_mod_expr )* }
add_sub_op = { "+" | "-" }

mul_div_mod_expr = { unitary_expr ~ ( mul_div_mod_op ~ unitary_expr )* }
mul_div_mod_op = { "*" | "/" | "%" }

unitary_expr = { ( unit_op ~ unitary_expr ) | suffix_expr }
unit_op = { "++" | "--" | "+" | "-" | "!" | "~" }

suffix_expr = { atom ~ ( increment | array_access | member_access | func_call )* }

atom = {
    this
    | fmt_string
    | CONST
    | ident
    | "(" ~ expr ~ ")"
}

this = { "this" }

fmt_string = @{ "f\"" ~ ( fmt_char | inner_expr )* ~ "\"" }
inner_expr = !{ "$" ~ expr ~ "$" }
escape_char = { "\\n" | "\\\"" | "\\\\" | "$$" }
fmt_char = !{ " " | escape_char | ( !( "\"" | "$" | "\\" ) ~ ANY ) }

increment = { "++" | "--" }
array_access = { "[" ~ expr ~ "]" }
member_access = { "." ~ ident }
func_call = { "(" ~ test_list ~ ")" }
test_list = { ( expr ~ ( "," ~ expr )* )? }

var_decl = { TYPE ~ assign ~ ( "," ~ assign )* }
assign = { ident ~ ( "=" ~ expr )? }

flow_stmt = { break_stmt | continue_stmt | return_stmt }
break_stmt = @{ "break" ~ ";" }
continue_stmt = @{ "continue" ~ ";" }
return_stmt = { "return" ~ expr? ~ ";"}
compound_stmt = { if_stmt | while_stmt | for_stmt }
if_stmt = { "if" ~ "(" ~ expr ~ ")" ~ block ~ ("else" ~ block)? }
while_stmt = { "while" ~ "(" ~ while_cond ~  ")" ~ block }
while_cond = { expr? }

for_stmt = { "for" ~ "(" ~ for_init ~ for_cond ~ for_update ~ ")" ~ block}
for_init = { ( expr | var_decl )? ~ ";" }
for_cond = { expr? ~ ";" }
for_update = { expr? }

func_def = { TYPE ~ ident ~ "(" ~ arg_list ~ ")" ~ block }
constr_def = { ident ~ "(" ~ ")" ~ block }
arg_list = { ( TYPE ~ ident ~ ( "," ~ TYPE ~ ident )* )? }
class_def = { "class" ~ ident ~ "{" ~ ( ( var_decl ~ ";" ) | constr_def | func_def )* ~ "}" ~ ";" }

TYPE = { ( user_type | builtin_type  ) ~ blank_bracket* }
builtin_type = @{ "void" | "bool" | "int" | "string" }
user_type = { ident }
ident = @{ ( keyword ~ ( ASCII_ALPHANUMERIC | "_" )+ ) | ( !keyword ~ ( ASCII_ALPHA ~ ( ASCII_ALPHANUMERIC | "_" ){0, 63} ) ) }
keyword = @{ builtin_type | "new" | "class" | NULL | BOOL | this | "if" | "else" | "for" | "while" | "break" | "continue" | "return" }
BOOL = @{ "true" | "false" }
INT = @{ ( ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ) | "0" }
STRING = @{ "\"" ~ ( "\\n" | "\\\"" | "\\\\" | (! ( "\\" | "\"" ) ~ ANY) ){0, 255} ~ "\""}

NULL = @{ "null" }
CONST = { BOOL | INT | STRING | NULL | arr_const }